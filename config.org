#+startup: fold

* Macros
** Custom faces
#+begin_src emacs-lisp
(defmacro custom-set-faces! (&rest specs)
  "Apply a list of face specs as user customizations.
SPECS is a list of face specs.
This is a drop-in replacement for `custom-set-face' that allows for a simplified
face format, e.g.
  (custom-set-faces!
   `(mode-line :foreground ,(doom-color 'blue))
   `(mode-line-buffer-id :foreground ,(doom-color 'fg) :background \"#000000\")
   '(mode-line-success-highlight :background \"#00FF00\")
   '(org-tag :background \"#4499FF\")
   '(org-ellipsis :inherit org-tag)
   '(which-key-docstring-face :inherit font-lock-comment-face))"
  `(apply #'custom-set-faces
          (cl-loop for (face . spec) in (list ,@specs)
                   if (keywordp (car spec))
                   collect `(,face ((t ,spec)))
                   else collect `(,face ,spec))))
#+end_src
* Global keybinds
** Toggle fullscreen
#+begin_src emacs-lisp
(general-define-key "C-s-f" 'toggle-frame-fullscreen)
#+end_src
** Kill buffer
#+begin_src emacs-lisp
(nmap "ZX" 'kill-current-buffer)
#+end_src
** Right option
#+begin_src emacs-lisp
(setq ns-right-option-modifier nil)
#+end_src
** Open in finder
#+begin_src emacs-lisp
(nmap
  :keymaps 'override
  :prefix "SPC o"
  "f" (lambda ()
        (interactive)
        (call-process-shell-command "open ." nil nil)))
#+end_src
* Interface
** Font settings
#+begin_src emacs-lisp
(custom-set-faces
 `(default ((t (:font "JetBrains Mono 17"))))
 `(fixed-pitch ((t (:inherit (default)))))
 `(fixed-pitch-serif ((t (:inherit (default)))))
 `(variable-pitch ((t (:font "JetBrains Mono 17")))))
#+end_src

** Theme settings
#+begin_src emacs-lisp
(use-package nano-theme
  :config
  (nano-light)

  (custom-set-faces!
   '(corfu-border :inherit nil)
   '(corfu-current :inherit (nano-strong nano-subtle))
   '(corfu-default :inherit 'highlight)
   '(font-latex-warning-face :inherit 'nano-strong)
   '(font-latex-math-face :inherit 'nano-strong)
   '(font-latex-bold-face :inherit 'nano-strong :weight bold)
   '(font-latex-string-face :inherit 'font-lock-string-face)
   '(font-latex-verbatim-face :inherit 'nano-strong)
   '(font-latex-sectioning-0-face :inherit 'nano-strong)
   '(font-latex-sectioning-1-face :inherit 'nano-strong)
   '(font-latex-sectioning-2-face :inherit 'nano-strong)
   '(font-latex-sectioning-3-face :inherit 'nano-strong)
   '(font-latex-sectioning-4-face :inherit 'nano-strong)
   '(font-latex-sectioning-5-face :inherit 'nano-strong)
   '(org-upcoming-deadline :inherit 'nano-critical)
   '(org-imminent-deadline :inherit 'nano-critical)
   '(org-upcoming-distant-deadline :inherit 'nano-default)
   '(org-agenda-date-weekend :inherit 'nano-strong)
   '(vterm-color-cyan :inherit 'nano-salient))
  
  (set-face-attribute 'mode-line nil :box nil)
  (set-face-attribute 'mode-line-inactive nil :box nil))
#+end_src

** Line numbers
#+begin_src emacs-lisp
(setq display-line-numbers-type 'relative)
(defun disable-line-numbers()
  (display-line-numbers-mode -1))
(global-display-line-numbers-mode +1)
#+end_src

** Ring bell
#+begin_src emacs-lisp
(setq ring-bell-function 'ignore)
#+end_src
** Highlight current line
#+begin_src emacs-lisp
(global-hl-line-mode +1)
#+end_src
** Scrolling
#+begin_src emacs-lisp
(setq scroll-margin 10
      hscroll-margin 20
      fast-but-imprecise-scrolling t
      scroll-conservatively 101
      scroll-preserve-screen-position t)
#+end_src
** Yes-or-no
#+begin_src emacs-lisp
(setq use-short-answers t)
(advice-add 'yes-or-no-p :override #'y-or-n-p)
#+end_src
** Word wrap
#+begin_src emacs-lisp
(use-package adaptive-wrap
  :general
  (nvmap
    :prefix "SPC t"
    "w" (lambda ()
          (interactive)
          (if global-visual-line-mode
              (progn
                (global-visual-line-mode -1)
                (toggle-truncate-lines 1))
            (progn
              (global-visual-line-mode 1)
              (toggle-truncate-lines -1)))))
  :config
  (global-visual-line-mode t)
  (add-hook 'visual-line-mode-hook
            (lambda () (unless (equal major-mode 'org-mode)
                         (adaptive-wrap-prefix-mode)))))
#+end_src
** Disable default interface
#+begin_src emacs-lisp
(tooltip-mode      -1)
(menu-bar-mode     -1)
(tool-bar-mode     -1)
(scroll-bar-mode   -1)
(blink-cursor-mode -1)
(setq use-dialog-box nil
      redisplay-dont-pause t
      inhibit-startup-screen t)
#+end_src
** Modeline
#+begin_src emacs-lisp
(use-package nano-modeline
  :custom
  (nano-modeline-position 'bottom)
  (nano-modeline-space-top 0.1)
  (nano-modeline-space-bottom -0.1)
  :init (nano-modeline-mode 1))
#+end_src
** Todo highlights
#+begin_src emacs-lisp
(use-package hl-todo
  :config
  (global-hl-todo-mode)

  (setq hl-todo-highlight-punctuation ":"
        hl-todo-keyword-faces
        '(("TODO" success bold)
          ("FIXME" error bold)
          ("REVIEW" font-lock-keyword-face bold)
          ("HACK" font-lock-constant-face bold)
          ("DEPRECATED" error bold)
          ("NOTE" success bold)
          ("BUG" error bold)
          ("XXX" font-lock-constant-face bold))))
#+end_src
** Show tabs
#+begin_src emacs-lisp
(global-whitespace-mode +1)
(setq whitespace-style '(face tabs))
#+end_src
** Splitting
#+begin_src emacs-lisp
(setq split-width-threshold t)
#+end_src
** Tab bar
#+begin_src emacs-lisp
(defun tab-bar-formatter (tab i)
  (let* ((current-p (eq (car tab) 'current-tab))
         (tab-face (if current-p
                       'tab-bar-tab
                     'tab-bar-tab-inactive))
         (hint-face (if current-p
                        'tab-bar-tab-hint
                      'tab-bar-tab-hint-inactive)))
    (concat (propertize (if tab-bar-tab-hints (format " %d:" i) "")
                        'face hint-face)
            (propertize
             (concat
              (alist-get 'name tab)
              (or (and tab-bar-close-button-show
                       (not (eq tab-bar-close-button-show
                                (if current-p 'non-selected 'selected)))
                       tab-bar-close-button)
                  "")
              "")
             'face tab-face))))

(setq tab-bar-close-button-show nil
      tab-bar-format '(tab-bar-format-tabs-groups tab-bar-separator)
      tab-bar-history-limit 25
      tab-bar-new-tab-choice "*scratch*"
      tab-bar-show 1
      tab-bar-tab-hints t
      tab-bar-tab-name-format-function #'tab-bar-formatter)

(custom-set-faces
 '(tab-bar-tab ((t (:inherit 'nano-salient)))))
#+end_src
* Editing
** Electric
#+begin_src emacs-lisp
(electric-indent-mode +1)
#+end_src
** Auto parenthesis
#+begin_src emacs-lisp
(use-package smartparens
  :config
  (smartparens-global-mode 1)
  (sp-pair "\\[" "\\]")

  ;; (sp-local-pair 'latex-mode "'" "'" :actions nil)
  ;; (sp-local-pair 'latex-mode "``" "''" :actions nil)
  ;; (sp-local-pair 'latex-mode "`" "'" :actions nil) 
  ;; (sp-local-pair 'latex-mode "\"" "\"" :actions nil)
  ;; (sp-local-pair 'latex-mode "<<" ">>" :trigger "\"")
  )
#+end_src
** Snippets
#+begin_src emacs-lisp
(use-package yasnippet
  :config
  (yas-global-mode +1)

  (setq yas-indent-line 'fixed)
  (setq yas-triggers-in-field t)
  (setq yas-key-syntaxes '("w_.()" "w_." "w_" "w" "w\\"))

  (imap
    :keymaps 'org-mode-map
    "C-<tab>" 'yas-expand))
#+end_src

** Tabs
#+begin_src emacs-lisp
(setq-default tab-width 4)
(setq-default indent-tabs-mode nil)
#+end_src
* Movement
** Avy
#+begin_src emacs-lisp
(use-package avy
  :config
  (setq avy-timeout-seconds 0.75)
  (nmap "s" 'avy-goto-char-timer))
#+end_src
** Better keybinds
#+begin_src emacs-lisp
(nvmap
  "H" "^"
  "L" "$")
#+end_src
* Completion
** LSP
#+begin_src emacs-lisp
(use-package eglot
  :hook ((latex-mode . eglot-ensure)
         (c++-ts-mode . eglot-ensure)
         (csharp-ts-mode . eglot-ensure))
  :config
  (add-to-list 'eglot-server-programs
               '(latex-mode . '("texlab"))
               '(c++-ts-mode . '("clangd"))))
#+end_src
** Vertico
#+begin_src emacs-lisp
(use-package vertico
  :general
  (:keymaps 'vertico-map
            "C-j" 'vertico-next
            "C-k" 'vertico-previous)
  :init
  (recentf-mode +1)
  (vertico-mode +1)

  (setq vertico-count 10
        vertico-resize nil
        vertico-cycle t)

  (setq completion-in-region-function
        (lambda (&rest args)
          (apply (if vertico-mode
                     #'consult-completion-in-region
                   #'completion--in-region)
                 args))))
#+end_src
** Consult
#+begin_src emacs-lisp
(use-package consult
  :custom
  (consult-preview-key nil)
  (consult-find-args "find . -not ( -wholename */.* -prune -o -name build -prune )")
  :general
  (nmap
    :prefix "SPC f"
    :keymaps 'override
    "r" 'consult-recent-file
    "f" 'find-file
    "d" 'consult-fd
    "g" 'consult-ripgrep)
  :init
  (defun my-call-process (command &rest args)
    "Execute COMMAND with ARGS synchronously.
Returns (STATUS . OUTPUT) when it is done, where STATUS is the returned error
code of the process and OUTPUT is its stdout output."
    (with-temp-buffer
      (cons (or (apply #'call-process command nil t nil (remq nil args))
                -1)
            (string-trim (buffer-string)))))

  (defvar consult-fd--history nil)
  (defvar consult-fd-args "fd --color=never -i -H -E .git --regex")
  (defun consult-fd (&optional dir initial)
    "Jump to file under DIR (recursive).
If INITIAL is non-nil, use as initial input."
    (interactive)
    (require 'consult)
    (let* ((default-directory (or dir default-directory))
           (prompt-dir (consult--directory-prompt "Find" default-directory))
           (cmd (split-string-and-unquote consult-fd-args " ")))
      (find-file
       (consult--read
        (split-string (cdr (apply #'my-call-process cmd)) "\n" t)
        :prompt default-directory
        :sort nil
        :initial (if initial (shell-quote-argument initial))
        :add-history (thing-at-point 'filename)
        :category 'file
        :history '(:input consult-fd))))))
#+end_src
** Marginalia
#+begin_src emacs-lisp
(use-package marginalia
  :init (marginalia-mode))
#+end_src
** Orderless
#+begin_src emacs-lisp
(use-package orderless
  :custom
  (completion-styles '(orderless basic))
  (completion-category-overrides '((file (styles basic partial-completion)))))
#+end_src
** Corfu
#+begin_src emacs-lisp
(use-package corfu
  :custom
  (corfu-cycle t)
  (corfu-auto t)
  (corfu-scroll-margin 5)
  (corfu-auto-delay 0)
  (corfu-count 5)
  (corfu-auto-prefix 2)
  (corfu-preselect-first nil)

  :bind
  (:map corfu-map
        ("TAB" . nil)
        ([tab] . nil))

  :general
  (imap
    :keymaps 'override
    "C-n" 'completion-at-point)

  (imap
    :keymaps 'corfu-map
    "TAB" nil
    [tab] nil)

  :hook ((prog-mode . corfu-mode)
         (shell-mode . corfu-mode)
         (eshell-mode . corfu-mode))

  :init
  (global-corfu-mode))

(use-package cape
  :custom
  (thing-at-point-file-name-chars "-@~/[:alnum:]_.$#%,:")
  :init
  (add-to-list 'completion-at-point-functions #'cape-dabbrev)
  (add-to-list 'completion-at-point-functions #'cape-file))
#+end_src
* History
#+begin_src emacs-lisp
(savehist-mode)
#+end_src
* Evil
** Evil mode
#+begin_src emacs-lisp
(use-package evil
  :init
  (setq evil-want-keybinding nil
        evil-want-Y-yank-to-eol t
        evil-want-C-u-scroll t
        evil-undo-system 'undo-fu
        evil-split-window-below t
        evil-vsplit-window-right t)
  :general
  (nmap "M-ESC" 'evil-ex-nohighlight)
  :config
  (evil-mode)
  (general-unbind 'evil-motion-state-map "TAB")
  (general-unbind 'pdf-view-mode-map "SPC")

  (evil-define-motion evil-next-line (count)
    :type exclusive
    (if count
        (let (line-move-visual) (evil-line-move count))
      (let ((line-move-visual t)) (evil-line-move 1))))

  (evil-define-motion evil-previous-line (count)
    :type exclusive
    (if count
        (let (line-move-visual) (evil-line-move (- count)))
      (let ((line-move-visual t)) (evil-line-move -1))))

  (evil-select-search-module 'evil-search-module 'evil-search))
#+end_src
** Evil collection
#+begin_src emacs-lisp
(use-package evil-collection
  :after evil
  :config
  (setq evil-collection-want-unimpaired-p nil)
  (evil-collection-init))
#+end_src
** Evil org
#+begin_src emacs-lisp
(use-package evil-org
  :ensure t
  :after org
  :hook (org-mode . (lambda () evil-org-mode))
  :config
  (require 'evil-org-agenda)
  (evil-org-agenda-set-keys))
#+end_src
** Evil highlights
#+begin_src emacs-lisp
(use-package evil-goggles
  :custom
  (evil-goggles-enable-paste nil)
  (evil-goggles-enable-change nil)
  (evil-goggles-enable-delete nil)
  :config
  (evil-goggles-mode))
#+end_src
** Evil commentary
#+begin_src emacs-lisp
(use-package evil-commentary
  :init (evil-commentary-mode))
#+end_src
* Git
** Magit
#+begin_src emacs-lisp
(use-package magit
  :config
  (setq magit-display-buffer-function #'magit-display-buffer-fullframe-status-v1)
  (nmap
    :prefix "SPC g"
    "g" 'magit))
#+end_src
** Git gutter
#+begin_src emacs-lisp
;; (use-package git-gutter
;;   :custom
;;   (git-gutter:modified-sign "│")
;;   (git-gutter:added-sign "│")
;;   (git-gutter:deleted-sign "│")
;;   :general
;;   (nvmap
;;     :prefix "SPC g"
;;     "s" 'git-gutter:stage-hunk
;;     "r" 'git-gutter:revert-hunk
;;     "n" 'git-gutter:next-hunk
;;     "p" 'git-gutter:previous-hunk)
;;   :init (global-git-gutter-mode +1))
#+end_src
** Git modes
#+begin_src emacs-lisp
(use-package git-modes
  :defer t)
#+end_src
* Tools
** Autosave
#+begin_src emacs-lisp
(setq make-backup-files nil)
(setq auto-save-default nil)
#+end_src
** Formatting
#+begin_src emacs-lisp
(use-package apheleia
  :config
  (push '(csharpier . ("dotnet" "csharpier"))
      apheleia-formatters)
  (setf (alist-get 'csharp-mode apheleia-mode-alist)
      '(isort csharpier))
  (apheleia-global-mode +1))
#+end_src
** Spelling
*** Enable spelling
#+begin_src emacs-lisp
(add-hook 'text-mode-hook 'flyspell-mode)
(add-hook 'prog-mode-hook 'flyspell-prog-mode)

(with-eval-after-load 'ispell
  (setenv "DICTIONARY" "en_US,ru_RU")
  (setq ispell-really-hunspell t
        ispell-program-name "hunspell"
        ispell-dictionary "en_US,ru_RU")
  ;; ispell-set-spellchecker-params has to be called
  ;; before ispell-hunspell-add-multi-dic will work
  (ispell-set-spellchecker-params)
  (ispell-hunspell-add-multi-dic "en_US,ru_RU"))
#+end_src

*** Flyspell correct
#+begin_src emacs-lisp
(use-package flyspell-correct
  :after flyspell
  :general
  (nmap
    :keymaps 'flyspell-mode-map
    "z=" 'flyspell-correct-wrapper))
#+end_src
*** Add word
#+begin_src emacs-lisp
(defun ispell-add-word()
  (interactive)
  (let ((current-location (point))
        (word (flyspell-get-word)))
    (when (consp word)
      (flyspell-do-correct 'save nil (car word) current-location (cadr word) (caddr word) current-location))))

(nmap "zg" 'ispell-add-word)
#+end_src
** PDF Viewer
#+begin_src emacs-lisp
(use-package pdf-tools
  :defer t
  :custom (pdf-view-display-size 'fit-height)
  :init
  (pdf-tools-install)
  ;; (add-to-list 'auto-mode-alist '("\\.pdf\\'" . pdf-view-mode))
  :hook
  (pdf-view-mode . pdf-isearch-minor-mode)
  (pdf-view-mode . disable-line-numbers))
#+end_src
** Undo
#+begin_src emacs-lisp
(use-package undo-fu)

(use-package undo-fu-session
  :after undo-fu
  :init (undo-fu-session-global-mode))
#+end_src
** Popper
#+begin_src emacs-lisp
(use-package popper
  :ensure t
  :bind (("C-`"   . popper-toggle-latest)
         ("M-`"   . popper-cycle)
         ("C-M-`" . popper-toggle-type))
  :init
  (setq popper-reference-buffers
        '("\\*Messages\\*"
          "Output\\*$"
          "\\*Async Shell Command\\*"
          help-mode
          compilation-mode))
  (setq popper-reference-buffers
        (append popper-reference-buffers
                '("^\\*eshell.*\\*$" eshell-mode ;eshell as a popup
                  "^\\*shell.*\\*$"  shell-mode  ;shell as a popup
                  "^\\*term.*\\*$"   term-mode   ;term as a popup
                  "*vterm*"  vterm-mode  ;vterm as a popup
                  )))
  (setq popper-window-height
        (lambda (win)
          "Determine the height of popup window WIN by fitting it to the buffer's content."
          (fit-window-to-buffer
           win
           (floor (frame-height) 3)
           (floor (frame-height) 3))))
  (popper-mode +1)
  (popper-echo-mode +1))
#+end_src

** Terminal
#+begin_src emacs-lisp
(use-package vterm
  :after (popper evil)
  :general
  (nmap
    :prefix "SPC t"
    :keymaps 'override
    "t" 'toggle-vterm
    "T" 'toggle-vterm-there)
  (nmap
    :keymaps 'vterm-mode-map
    "q" 'delete-window)
  :hook
  (vterm-mode . disable-line-numbers))


(defun toggle-vterm(&optional args)
  (interactive "p")
  (let* ((default-directory (or (projectile-project-root) default-directory)))
    (vterm args)
    (evil-insert-state)))

(defun toggle-vterm-there(&optional args)
  (interactive "p")
  (let* ((project-directory (or (projectile-project-root) default-directory)))
    (vterm args)
    (vterm-send-string (concat "cd " project-directory))
    (vterm-send-return)
    (vterm-clear)
    (evil-insert-state)))
#+end_src

** Treesitter
#+begin_src emacs-lisp
(use-package treesit-auto
  :config
  (global-treesit-auto-mode))
#+end_src

** Russian keyboard layout
#+begin_src emacs-lisp
(use-package reverse-im
  :custom (reverse-im-input-methods '("russian-computer"))
  :config (reverse-im-mode t))
#+end_src

** Save place
#+begin_src emacs-lisp
(save-place-mode)

(use-package saveplace-pdf-view
  :after saveplace)
#+end_src
** Dired
#+begin_src emacs-lisp
(nmap
  :keymaps 'override
  :prefix "SPC o"
  "d" 'dired
  "D" (lambda ()
        (interactive)
        (dired default-directory)))
#+end_src
* Projects
** Projectile
#+begin_src emacs-lisp
(use-package projectile
  :init
  (projectile-mode +1))
#+end_src
** Skeletor
#+begin_src emacs-lisp
(use-package skeletor
  :defer t
  :custom
  (skeletor-user-directory (concat user-emacs-directory "templates"))
  (skeletor-completing-read-function 'completing-read)
  :general
  (nmap
    :prefix "SPC p"
    :keymaps 'override
    "c" 'skeletor-create-project)
  :config
  (skeletor-define-template "cpp-cmake"
    :title "C++ CMake"
    :substitutions
    '(("__CMAKE_TARGET_NAME__" . (lambda ()
                                   (read-string "CMake project name: "))))))
#+end_src
* Languages
** Org-mode
*** Settings
#+begin_src emacs-lisp
(add-hook 'org-mode-hook
          (lambda ()
            (setq calendar-week-start-day 1
                  org-agenda-start-on-weekday 1
                  org-edit-src-content-indentation 0
                  org-confirm-babel-evaluate nil
                  org-agenda-skip-deadline-if-done t
                  org-agenda-skip-scheduled-if-done t
                  org-agenda-skip-timestamp-if-done t)
            (org-indent-mode +1)))
#+end_src
*** Mappings
#+begin_src emacs-lisp
(nmap
  :prefix "SPC o"
  "a" 'org-agenda)

(nmap
  :keymaps 'org-mode-map
  :prefix "SPC oi"
  "d" 'org-deadline)
#+end_src
** Latex
*** Auctex
#+begin_src emacs-lisp
(use-package tex
  :elpaca auctex
  :custom
  (LaTeX-item-indent 0)
  (LaTeX-indent-level 4)
  (tex-fontify-script nil)
  (TeX-close-quote ">>")
  (TeX-open-quote "<<")
  (font-latex-fontify-script nil))
#+end_src
*** Indent
#+begin_src emacs-lisp
(with-eval-after-load 'latex
    (add-to-list 'LaTeX-indent-environment-list '("align*")))
#+end_src
** CMake
*** Language support
#+begin_src emacs-lisp
(use-package cmake-mode
  :defer t)
#+end_src
*** Utilities
#+begin_src emacs-lisp
(defun cmake-version ()
  (let ((result (shell-command-to-string "cmake --version")))
    (string-match "\\([0-9]+\\.[0-9]+\\)" result)
    (match-string 1 result)))
#+end_src
** C++
#+begin_src emacs-lisp
(setq c-basic-offset 4)

(defun my-c-setup ()
   (c-set-offset 'innamespace 0))
(add-hook 'c++-mode-hook 'my-c-setup)
#+end_src
* Fix bugs
#+begin_src emacs-lisp
(when (eq system-type 'darwin)
  (customize-set-variable 'native-comp-driver-options '("-Wl,-w")))
#+end_src
#+begin_src emacs-lisp
(use-package exec-path-from-shell
  :config
  (when (memq window-system '(mac ns x))
    (exec-path-from-shell-initialize)))
#+end_src

#+begin_src emacs-lisp
(add-to-list 'default-frame-alist '(fullscreen . maximized))
#+end_src

#+begin_src emacs-lisp
(nvmap
  :prefix "C-x"
  "j" 'next-buffer
  "k" 'previous-buffer)
#+end_src

#+begin_src emacs-lisp
(use-package flycheck
  :init (global-flycheck-mode))

(use-package flycheck-eglot
  :after (flycheck eglot)
  :config
  (global-flycheck-eglot-mode 1))
#+end_src
